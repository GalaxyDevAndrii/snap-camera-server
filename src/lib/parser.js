/*
Snap Lens File Extractor
(c) 2023 by Patrick Trumpis
Original code copy from:
https://github.com/ptrumpis/snap-lens-file-extractor
*/
export default class e{constructor(){this.meta=void 0,this.files=void 0,this.byteArray=void 0}async parseArrayBuffer(e,t){this.meta=new LensFileMeta,this.files=[],this.byteArray=new Uint8Array(e),this._parseFileMeta(e);let s=t.decompress(this.byteArray.slice(this.meta.offsetRecords+8));for(let i=0;i<this.meta.records.length;i++){let r=this.meta.records[i].fileOffset,a=r+this.meta.records[i].fileSize,n=new LensFileContainer(this.meta.records[i].fileName,s.slice(r,a));n.fileSize=this.meta.records[i].fileSize,n.compressedSize=this.meta.records[i].compressedSize,this.files.push(n)}}_parseFileMeta(e){try{let t=new DataView(e);this.meta.signature=String.fromCharCode.apply(null,new Uint8Array(e.slice(0,3))),this.meta.version=t.getUint32(4,!0),this.meta.fileCount=t.getUint32(8,!0),this.meta.offsetRecords=t.getUint32(12,!0),this.meta.unknown0x10=t.getUint32(16,!0),this.meta.unknown0x14=t.getUint32(20,!0),this.meta.sizeUncompressed=t.getUint32(24,!0),this.meta.sizeCompressed=t.getUint32(28,!0),this.meta.unknown0x40=t.getUint32(64,!0),this.meta.sizeRecords=t.getUint32(68,!0),this._parseFileRecords(e.slice(72,this.meta.sizeRecords+72));let s=this.meta.offsetRecords;this.meta.unknown4bytes=t.getUint32(s,!0),this.meta.sizeZstd=t.getUint32(4+s,!0),this.meta.magicNumber=t.getUint32(8+this.meta.offsetRecords,!0)}catch(i){console.error(i)}}_parseFileRecords(e){try{let t=new DataView(e),s=0;for(let i=0;i<this.meta.fileCount&&s<this.meta.sizeRecords+17;i++){let r=new LensFileMetaRecord;r.fileNameSize=t.getUint32(s,!0),r.fileName=String.fromCharCode.apply(null,new Uint8Array(e).slice(4+s,4+s+r.fileNameSize)),r.compressedSize=t.getUint32(4+s+r.fileNameSize,!0),r.fileSize=t.getUint32(8+s+r.fileNameSize,!0),r.fileOffset=t.getUint32(12+s+r.fileNameSize,!0),this.meta.records.push(r),s+=r.fileNameSize+16}}catch(a){console.error(a)}}};class LensFileMeta{constructor(){this.signature,this.version,this.fileCount,this.offsetRecords,this.unknown0x10,this.unknown0x14,this.sizeUncompressed,this.sizeCompressed,this.padding,this.unknown0x40,this.sizeRecords,this.records=[],this.unknown4bytes,this.sizeZstd,this.magicNumber}}class LensFileMetaRecord{constructor(){this.fileNameSize,this.fileName,this.compressedSize,this.fileSize,this.fileOffset}}class LensFileContainer{constructor(e,t){this.fileName=e,this.rawData=t}}